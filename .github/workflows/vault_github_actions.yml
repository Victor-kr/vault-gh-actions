name: "Vault-Github-Actions"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  vault:
    name: 1. Vault Secrets Retrieve
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: http://127.0.0.1:8200
          tlsSkipVerify: true
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            secrets/data/tfvar prefix | prefix ;
            secrets/data/tfvar height | height ;
            secrets/data/tfvar width | width;
            secrets/data/tfvar org | TF_ORGANIZATION;
            secrets/data/tfvar placeholder | placeholder;
            secrets/data/tfvar region | region ;
            terraform/creds/my-user token | TF_API_TOKEN

  setup-workspace:
    runs-on: self-hosted
    needs: vault
    name: 2. Setup Terraform Cloud workspace
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: setup workspace
        id: workspace
        uses: patrontech/devops-tf-cloud-update-var@v1.0
        with:  
          workSpaceName: vault-gh-actions  
          organizationName: '{{ steps.secrets.TF_ORGANIZATION }}' 
          terraformToken: '{{ steps.secrets.TF_API_TOKEN }}'
          terraformHost: 'app.terraform.io'
          variableName: 'prefix'
          variableValue: '{{ steps.secrets.prefix }}'

  terraform:
    name: 3. Deploy EC2
    needs: setup-workspace
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt 

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
